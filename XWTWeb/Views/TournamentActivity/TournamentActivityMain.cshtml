@model XWTWeb.Models.TournamentActivity


@{
    ViewBag.Title = "Main";
}


<div class="container-fluid p-5">
    <div class="row">

        @*Player Column*@
        <div id="playerColumn" class="col-12 col-lg mr-1 pb-3">
            <div class="row bg-white">
                <button id="playerColBtn" class="col btn btn-secondary text-left pt-0" style="font-size:x-large;" data-toggle="collapse" data-target="#tournamentPlayerSelect" aria-expanded="true" aria-controls="tournamentPlayerSelect" onclick="PlayersBtnClick();">
                    Players
                </button>
            </div>
            <div class="row collapse @(Model.TournamentMain.Rounds.Count == 0 ? "show" : "")" id="tournamentPlayerSelect">
                @*All Players*@
                <div class="h5 col-5 m-2 p-2 border border-secondary rounded bg-white">
                    @*<div class="container">
                        <div class="row">
                            <label class="col-12 col-lg">
                                All Players
                            </label>
                            <select class="form-control-sm col"></select>
                        </div>
                    </div>*@

                    <div class="container">
                        <div class="row">
                            All Players
                        </div>
                    </div>

                    <div class="container">
                        <select id="tournamentAllPlayersList" class="form-control col mt-2" size="@Model.GetPlayerTotal()" multiple="multiple">
                            @foreach (XWTWeb.Models.Player player in Model.AllPlayers)
                            {
                                <option value="@player.Id">@player.Name</option>
                            }
                        </select>
                    </div>

                </div>

                @*Player Button Group*@
                <div class="col-1 m-0 p-0 d-flex align-middle">
                    <div class="btn-group-vertical col m-0 p-0" role="group">
                        <button class="fas fa-angle-double-right btn btn-outline-info" onclick="AddAllPlayers();">&nbsp;</button>
                        <button class="fas fa-angle-right btn btn-outline-info" onclick="AddSelectedPlayers();">&nbsp;</button>
                        <button class="fas fa-angle-left btn btn-outline-info" onclick="RemoveSelectedPlayers();">&nbsp;</button>
                        <button class="fas fa-angle-double-left btn btn-outline-info" onclick="RemoveAllPlayers();">&nbsp;</button>
                    </div>
                </div>

                @*Next Round Players*@
                <div class="h5 col m-2 p-2 border border-secondary rounded bg-white">
                    <div class="container">
                        <div class="row">
                            Next Round
                        </div>
                    </div>

                    <div class="container">
                        <select id="tournamentActivePlayersList" class="form-control col mt-2" size="@Model.GetPlayerTotal()" multiple="multiple">
                            @foreach (XWTWeb.Models.Player player in Model.NextRoundPlayers)
                            {
                                <option value="@player.Id">@player.Name</option>
                            }
                        </select>
                    </div>

                </div>
            </div>
        </div>


        @*Rounds Column*@
        <div id="roundColumn" onclick="" class="col border border-secondary rounded bg-white mb-3">
            <label style="font-size:x-large;">Rounds</label>

            <ul class="nav nav-tabs">
                @foreach (XWTWeb.Models.TournamentMainRound round in Model.TournamentMain.Rounds)
                {
                <li class="nav-item">
                    @if (round.Number == Model.TournamentMain.Rounds.Count)
                    {
                        <a class="nav-link active" data-toggle="tab" href="#RoundTab-@round.Number">Round @round.Number</a>
                    }
                    else
                    {
                        <a class="nav-link" data-toggle="tab" href="#RoundTab-@round.Number">Round @round.Number</a>
                    }
                </li>
                }

                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Options</a>
                    <div class="dropdown-menu" x-placement="bottom-start" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(0px, 42px, 0px);">
                        <a class="dropdown-item" href="#" onclick="StartNextRound(event, true, @Model.TournamentMain.Rounds.Count, @(Model.TournamentMain.Rounds.Count > 0 ? Model.TournamentMain.Rounds[Model.TournamentMain.Rounds.Count - 1].Id : 0));">Start Next Round</a>
                        <a class="dropdown-item" href="#" onclick="StartNextRound(event, false, @Model.TournamentMain.Rounds.Count, @(Model.TournamentMain.Rounds.Count > 0 ? Model.TournamentMain.Rounds[Model.TournamentMain.Rounds.Count - 1].Id : 0));">Start Top Cut</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" onclick="DeleteLastRound(event, @Model.TournamentMain.Rounds.Count, @(Model.TournamentMain.Rounds.Count > 0 ? Model.TournamentMain.Rounds[Model.TournamentMain.Rounds.Count - 1].Id : 0));">Delete Last Round</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" onclick="TimerPrompt(@Model.TournamentMain.RoundTimeLength);">Start Timer</a>
                    </div>
                </li>
            </ul>

            @*Round's Tables*@
            <div id="tournamentRoundTabContent" class="tab-content">
                @foreach (XWTWeb.Models.TournamentMainRound round in Model.TournamentMain.Rounds)
                {
                <div class="tab-pane fade @(round.Number == Model.TournamentMain.Rounds.Count ? "show active" : "" ) " id="RoundTab-@round.Number">
                    <div class="container-fluid pt-3">
                        <table class="table table-striped table-hover">
                            <tbody>

                                @foreach (XWTWeb.Models.TournamentMainRoundTable table in round.Tables)
                                {
                                <tr>
                                    <td>
                                        <div class="row text-center">
                                            <label class="col h5">
                                                Table #@table.Number@(table.Bye ? " (BYE)" : "") - @table.TableName
                                            </label>
                                        </div>
                                        <hr class="m-0 mb-3" />
                                        <div class="row justify-content-center roundtabledatarow">

                                            @*Player 1*@
                                            <div class="col d-flex justify-content-end">
                                                <input id="@round.Id-@table.Id-Player1Score" type="number" min="0" max="@Model.TournamentMain.MaxPoints" value="@table.Player1Score" class="form-control text-right" style="max-width:75px;" data-playerid="@table.Player1Id" data-playernumber="1" data-roundid="@round.Id" data-tableid="@table.Id" data-roundnumber="@round.Number" data-tablenumber="@table.Number" data-save="score" @(table.Bye ? "disabled" : "") onchange="UpdatePlayerScores(this, @Model.TournamentMain.MaxPoints);" tabindex="@table.Number" />
                                            </div>
                                            <button id="@round.Id-@table.Id-Player1Winner" class="col-auto btn p-1 align-self-center @(table.Player1Winner ? "btn-outline-success fas fa-check" : "btn-outline-danger fas fa-times")" @(table.Bye || !table.ScoreTied ? "disabled" : "") data-playerid="@table.Player1Id" data-playernumber="1" data-roundid="@round.Id" data-tableid="@table.Id" data-roundnumber="@round.Number" data-tablenumber="@table.Number" data-winner="@table.Player1Winner" onclick="TogglePlayerWinner(this);"></button>
                                            <label class="h6 col m-0 align-self-center">@table.Player1Name</label>

                                            @*<div class="w-100"> </div>*@
                                            <div class="col-12 text-center font-italic align-self-center p-0 m-1 h5">
                                                vs
                                            </div>
                                            @*<div class="w-100"> </div>*@

                                            @*Player 2*@
                                            <div class="col d-flex justify-content-end">
                                                <input id="@round.Id-@table.Id-Player2Score" type="number" min="0" max="@Model.TournamentMain.MaxPoints" value="@table.Player2Score" class="form-control text-right" style="max-width:75px;" data-playerid="@table.Player2Id" data-playernumber="2" data-roundid="@round.Id" data-tableid="@table.Id" data-roundnumber="@round.Number" data-tablenumber="@table.Number" data-save="score" @(table.Bye ? "disabled" : "") onchange="UpdatePlayerScores(this, @Model.TournamentMain.MaxPoints);" tabindex="@table.Number" />
                                            </div>

                                            <button id="@round.Id-@table.Id-Player2Winner" class="col-auto btn p-1 align-self-center @(table.Player2Winner ? "btn-outline-success fas fa-check" : "btn-outline-danger fas fa-times")" @(table.Bye || !table.ScoreTied ? "disabled" : "") data-playerid="@table.Player2Id" data-playernumber="2" data-roundid="@round.Id" data-tableid="@table.Id" data-roundnumber="@round.Number" data-tablenumber="@table.Number" data-winner="@table.Player2Winner" onclick="TogglePlayerWinner(this);"></button>
                                            <label class="h6 col m-0 align-self-center">@table.Player2Name</label>
                                        </div>
                                    </td>
                                </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </div>
                }
            </div>

        </div>

        @*Standings Column*@
        <div id="standingsColumn" class="col-12 col-md-4 border border-secondary rounded bg-white mb-3 ml-md-3">
            <label style="font-size:x-large;">Standings</label>

            <table class="table table-striped table-light table-hover table-responsive-xl">
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Player Name</th>
                        <th>Score</th>
                        <th>MOV</th>
                        <th>SoS</th>
                    </tr>
                </thead>
                <tbody id="standingsTBody">

                    @Html.Raw(Model.GetStandings())

                </tbody>
            </table>
        </div>
    </div>
</div>


<script type="text/javascript">

    var strWinClasses = "btn-outline-success fas fa-check"
        , strLoseClasses = "btn-outline-danger fas fa-times";

    $(document).ready(function () {
        PlayersBtnClick(true);
    });

    function PlayersBtnClick(blnOnLoad) {
        blnOnLoad = blnOnLoad || false;

        var blnPlayerSelectClass = !$("#tournamentPlayerSelect").hasClass('show');

        if (blnOnLoad) blnPlayerSelectClass = !blnPlayerSelectClass;

        //This triggers before collapse show has been added/removed, so works "opposite" here
        if (blnPlayerSelectClass) {
            $("#playerColumn").addClass('col-lg');
            $("#playerColBtn").addClass('btn-secondary').removeClass('btn-outline-secondary');
            $("#standingsColumn").removeClass('col-md-4').removeClass('ml-md-3');
        } else {
            $("#playerColumn").removeClass('col-lg');
            $("#playerColBtn").removeClass('btn-secondary').addClass('btn-outline-secondary');
            $("#standingsColumn").addClass('col-md-4').addClass('ml-md-3');
        }
    }

    //Players - Add/Remove
    function AddAllPlayers() {
        $("#tournamentAllPlayersList").find('option').clone().appendTo("#tournamentActivePlayersList");
        $("#tournamentAllPlayersList").empty(); 
        SortSelect($("#tournamentActivePlayersList"));
    }

    function AddSelectedPlayers() {
        $("#tournamentAllPlayersList option:selected").each(function () {
            $(this).clone().appendTo("#tournamentActivePlayersList");
            $(this).remove();
        });
        SortSelect($("#tournamentActivePlayersList"));
    }

    function RemoveAllPlayers() {
        $("#tournamentActivePlayersList").find('option').clone().appendTo("#tournamentAllPlayersList");
        $("#tournamentActivePlayersList").empty();    
        SortSelect($("#tournamentAllPlayersList"));
    }

    function RemoveSelectedPlayers() {
        $("#tournamentActivePlayersList option:selected").each(function () {
            $(this).clone().appendTo("#tournamentAllPlayersList");
            $(this).remove();
        });
        SortSelect($("#tournamentAllPlayersList"));
    }

    //Rounds - Add/Remove
    function StartNextRound(e, blnSwiss, intRoundCount, intRoundId) {
        e.stopPropagation();

        //Make sure we have players for the next round
        if ($("#tournamentActivePlayersList option").length == 0) {
            bootbox.alert("Please add players to the Next Round");

            //Show Players section if not already visible
            if (!$("#tournamentPlayerSelect").is(':visible')) {
                $("#tournamentPlayerSelect").collapse('show');
                PlayersBtnClick();
            }
            return false;
        }

        //Verify that all tables have logged a winner
        if (intRoundCount > 0) {
            var intWinnnerCount = $(".roundtabledatarow button[data-winner='True']").length;
            var intRoundTableRowCount = $(".roundtabledatarow").length;

            if (intWinnnerCount != intRoundTableRowCount) {
                bootbox.alert("Not all tables have logged a winner!");
                return false;
            }
        }

        var jsonData = [];

        //Create json data to send
        $("#tournamentActivePlayersList option").each(function () {
            var player = {
                Id: 0,
                TournamentId: 0,
                PlayerId: $(this).val(),
                PlayerName: $(this).text(),
                Active: true
            };
            jsonData.push(player);
        });


        //Update player info
        $.ajax({
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: "json",
            type: "POST",
            url: "/TournamentActivity/AddNewRound",
            data: { swiss: blnSwiss, activePlayers: JSON.stringify(jsonData) },
            beforeSend: BBoxLoading,
            complete: function (data) {
                location.reload();
                BBoxLoadingClose();
            }
        });
    }


    //Delete the last round
    function DeleteLastRound(e, intRoundCount, intRoundId) {
        e.stopPropagation();

        if (intRoundCount == 0 || intRoundId == 0) {
            bootbox.alert('There are no rounds to delete!');
            return false;
        }

        bootbox.confirm({
            message: "Are you sure you want to delete the last round listed (this cannot be undone)?",
            callback: function (result) {
                if (result) {

                    //Delete last round
                    $.ajax({
                        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                        dataType: "json",
                        type: "POST",
                        url: "/TournamentActivity/DeleteRound",
                        data: { roundId: intRoundId },
                        beforeSend: BBoxLoading,
                        complete: function (data) {
                            location.reload();
                            BBoxLoadingClose();
                        }
                    });
                }
            }
        });
    }

    function RoundsFocus() {

        //Hide Players section if already visible
        if ($("#tournamentPlayerSelect").is(':visible') && $("#tournamentActivePlayersList option").length > 0) {
            PlayersBtnClick();
            $("#tournamentPlayerSelect").collapse('hide');
        }
    }

    function UpdatePlayerScores(inpt, intMaxPts) {

        var intPlayerId = $(inpt).data('playerid')
            , intPlayerNumber = $(inpt).data('playernumber')
            , intRoundId = $(inpt).data('roundid')
            , intTableId = $(inpt).data('tableid')
            , intRoundNumber = $(inpt).data('roundnumber')
            , intTableNumber = $(inpt).data('tablenumber')
            , intPoints = parseInt($(inpt).val(), 10);

        //Determine which round and table we're dealing with, set which values we're to search for 
        var intRoundField = intRoundId
            , intTableField = intTableId;

        //Modify to ensure points are within 0 and max points
        if (intPoints < 0)
            $(inpt).val(0);
        else if (intPoints > intMaxPts)
            $(inpt).val(intMaxPts);
        else
            $(inpt).val(intPoints);


        var intPlayer1Score = parseInt($("#" + intRoundField + "-" + intTableField + "-Player1Score").val(), 10)
            , intPlayer2Score = parseInt($("#" + intRoundField + "-" + intTableField + "-Player2Score").val(), 10);

        //Enabled/Disable the manual winner flag
        var $inptPlayer1Winner = $("#" + intRoundField + "-" + intTableField + "-Player1Winner")
            , $inptPlayer2Winner = $("#" + intRoundField + "-" + intTableField + "-Player2Winner");

        if (intPlayer1Score != intPlayer2Score) {
            $inptPlayer1Winner.prop('disabled', true).attr('disabled', true);
            $inptPlayer2Winner.prop('disabled', true).attr('disabled', true);
        }
        else {
            $inptPlayer1Winner.prop('disabled', false).attr('disabled', false);
            $inptPlayer2Winner.prop('disabled', false).attr('disabled', false);
        }

        //Update win/lose indicators as needed
        if (intPlayer1Score > intPlayer2Score) {
            SetPlayerWinner($inptPlayer1Winner);
            SetPlayerLoser($inptPlayer2Winner);
        }
        else if (intPlayer2Score > intPlayer1Score) {
            SetPlayerWinner($inptPlayer2Winner);
            SetPlayerLoser($inptPlayer1Winner);
        }

        UpdateTableScoreDB(intTableId, intRoundId, intRoundField, intTableField);

    }

    function TogglePlayerWinner(btn) {
        var intPlayerId = $(btn).data('playerid')
            , intPlayerNumber = $(btn).data('playernumber')
            , intRoundId = $(btn).data('roundid')
            , intTableId = $(btn).data('tableid')
            , intRoundNumber = $(btn).data('roundnumber')
            , intTableNumber = $(btn).data('tablenumber');

        //Determine which round and table we're dealing with, set which values we're to search for 
        var intRoundField = intRoundId
            , intTableField = intTableId;

        var $inptPlayer1Winner = $("#" + intRoundField + "-" + intTableField + "-Player1Winner")
            , $inptPlayer2Winner = $("#" + intRoundField + "-" + intTableField + "-Player2Winner");

        if (intPlayerNumber == 1) {
            SetPlayerWinner($inptPlayer1Winner);
            SetPlayerLoser($inptPlayer2Winner);
        }
        else if (intPlayerNumber == 2) {
            SetPlayerWinner($inptPlayer2Winner);
            SetPlayerLoser($inptPlayer1Winner);
        }

        UpdateTableScoreDB(intTableId, intRoundId, intRoundField, intTableField);
    }

    function UpdateTableScoreDB(intTableId, intRoundId, intRoundField, intTableField) {
        //Update player score on database

        var intPlayer1Score = parseInt($("#" + intRoundField + "-" + intTableField + "-Player1Score").val(), 10)
            , intPlayer2Score = parseInt($("#" + intRoundField + "-" + intTableField + "-Player2Score").val(), 10);

        var $inptPlayer1Winner = $("#" + intRoundField + "-" + intTableField + "-Player1Winner")
            , $inptPlayer2Winner = $("#" + intRoundField + "-" + intTableField + "-Player2Winner");

        var table = {
            Id: intTableId
            , RoundId: intRoundId
            , ScoreTied: (intPlayer1Score == intPlayer2Score ? true : false)
            , Player1Id: $("#" + intRoundField + "-" + intTableField + "-Player1Score").data('playerid')
            , Player1Score: intPlayer1Score
            , Player1Winner: $inptPlayer1Winner.data('winner')
            , Player2Id: $("#" + intRoundField + "-" + intTableField + "-Player2Score").data('playerid')
            , Player2Score: intPlayer2Score
            , Player2Winner: $inptPlayer2Winner.data('winner')
        };

        $.ajax({
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: "json",
            type: "POST",
            url: "/TournamentActivity/UpdateTableData",
            data: { table: JSON.stringify(table) },
            //beforeSend: BBoxLoading,
            complete: function (data) {
                //location.reload();
                $("#standingsTBody").html(data.responseText);
                BBoxLoadingClose();
            }
        });
    }

    function SetPlayerWinner(btn) {
        if (btn.hasClass(strLoseClasses)) {
            btn.removeClass(strLoseClasses);
            btn.addClass(strWinClasses);
            btn.data('winner', 'True');
            btn.attr('data-winner', 'True');
        }
    }

    function SetPlayerLoser(btn) {
        if (btn.hasClass(strWinClasses)) {
            btn.removeClass(strWinClasses);
            btn.addClass(strLoseClasses);
            btn.data('winner', 'False');
            btn.attr('data-winner', 'False');
        }
    }

    function TimerPrompt(intDefaultLength) {
        bootbox.prompt({
            size: "small",
            title: "Set round length (in minutes):",
            closeButton: false,
            inputType: 'number',
            value: intDefaultLength,
            callback: function (result) {
                if (result) {
                    bootbox.alert(result + ' minutes');
                }
            }
        });
    }

</script>
